version: '3.8'

services:
  gateway:
    build:
      context: .
      dockerfile: apps/gateway/Dockerfile
    container_name: gateway_service
    ports:
      - '${GATEWAY_PORT:-3000}:3000'
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${GATEWAY_PORT}
      AUTH_SERVICE_URL: ${AUTH_SERVICE_URL}
      EVENT_SERVICE_URL: ${EVENT_SERVICE_URL}
      JWT_ACCESS_TOKEN_SECRET: ${JWT_ACCESS_TOKEN_SECRET}
    volumes:
      - ./apps/gateway/src:/usr/src/app/apps/gateway/src
      - ./libs:/usr/src/app/libs
    depends_on:
      - auth_service
      - event_service
    networks:
      - event_net

  auth_service:
    build:
      context: .
      dockerfile: apps/auth/Dockerfile
    container_name: auth_service_container
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${AUTH_PORT}
      MONGODB_URI: ${AUTH_MONGODB_URI}
      JWT_ACCESS_TOKEN_SECRET: ${JWT_ACCESS_TOKEN_SECRET}
      JWT_REFRESH_TOKEN_SECRET: ${JWT_REFRESH_TOKEN_SECRET}
      JWT_ACCESS_TOKEN_EXPIRES_IN: ${JWT_ACCESS_TOKEN_EXPIRES_IN}
      JWT_REFRESH_TOKEN_EXPIRES_IN: ${JWT_REFRESH_TOKEN_EXPIRES_IN}
      API_SERVER_ORIGIN: ${AUTH_API_SERVER_ORIGIN}
    volumes:
      - ./apps/auth/src:/usr/src/app/apps/auth/src
      - ./libs:/usr/src/app/libs
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    networks:
      - event_net

  event_service:
    build:
      context: .
      dockerfile: apps/event/Dockerfile
    container_name: event_service_container
    env_file:
      - ./apps/event/.env
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${EVENT_PORT}
      MONGODB_URI: ${EVENT_MONGODB_URI}
      JWT_ACCESS_TOKEN_SECRET: ${JWT_ACCESS_TOKEN_SECRET}
    volumes:
      - ./apps/event/src:/usr/src/app/apps/event/src
      - ./libs:/usr/src/app/libs
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    networks:
      - event_net

  mongo_init_replica:
    image: node:18-alpine
    container_name: mongo_init_replica
    restart: 'no'
    working_dir: /app
    command: >
      sh -c "
      npm install mongodb &&
      node init-replica.js
      "
    volumes:
      - ./docker/init-replica.js:/app/init-replica.js
    networks:
      - event_net
    depends_on:
      - mongo1
      - mongo2
      - mongo3

  mongo1:
    container_name: mongo1
    image: mongo:5.0.21
    ports:
      - 27017:27017
    restart: always
    networks:
      - event_net
    environment:
      - ./docker/mongo.env
    volumes:
      - ./docker/local-mongodb.key:/key/mongodb.key
      - ./docker/mongodb.conf:/etc/mongodb.conf
    command: mongod --replSet rs0 --port 27017

  mongo2:
    container_name: mongo2
    image: mongo:5.0.21
    ports:
      - 27018:27018
    restart: always
    networks:
      - event_net
    environment:
      - ./docker/mongo.env
    volumes:
      - ./docker/local-mongodb.key:/key/mongodb.key
      - ./docker/mongodb.conf:/etc/mongodb.conf
    command: mongod --replSet rs0 --port 27018

  mongo3:
    container_name: mongo3
    image: mongo:5.0.21
    ports:
      - 27019:27019
    restart: always
    networks:
      - event_net
    environment:
      - ./docker/mongo.env
    volumes:
      - ./docker/local-mongodb.key:/key/mongodb.key
      - ./docker/mongodb.conf:/etc/mongodb.conf
    command: mongod --replSet rs0 --port 27019

volumes:
  mongo_data:

networks:
  event_net:
    driver: bridge
